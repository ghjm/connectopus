---
name: ci_checks

on:

  workflow_dispatch:
    inputs:
      publish:
        type: boolean
        description: Publish as latest
        default: true
      check_platforms:
        type: boolean
        description: Run platform checks
        default: true

  pull_request:
    branches:
      - main

  push:
    branches:
      - main

env:
  GO_VERSION: 1.18

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:

  code_changed:
    name: code_changed
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    outputs:
      any_modified: ${{ steps.changed-files.outputs.any_modified }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v34.5.1
        with:
          files: |
            **/*.go
            **/*.js
            **/*.ts
            **/*.tsx
            **/*.graphqls
            **/*.graphql
            **/*.sh
            **/*.html
            **/*.css
            **/Makefile
            **/Dockerfile
            **/package.json
            **/package-lock.json
            **/go.mod
            **/go.sum

  codeql_analysis:
    name: codeql_analysis
    runs-on: ubuntu-latest
    needs: code_changed
    if: |
      always() && !cancelled() &&
      (needs.code_changed.result == 'skipped' || needs.code_changed.outputs.any_modified == 'true')
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'go', 'javascript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  linux_checks:
    name: linux_checks
    runs-on: ubuntu-latest
    needs: code_changed
    if: |
      always() && !cancelled() &&
      (needs.code_changed.result == 'skipped' || needs.code_changed.outputs.any_modified == 'true')
    steps:

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go build dirs
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: npm
          cache-dependency-path: ui/package-lock.json

      - name: Build the UI
        run: make ui

      - name: Run Go linters
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          skip-cache: true

      - name: Run JS linters
        run: |
          cd ui
          npx prettier --check './**/*.{tsx,ts,js}' --loglevel warn
          npx eslint --ext .tsx,.ts,.js ./src/ --max-warnings 0

      - name: Check formatting
        run: gofmt -l .

      - name: Check that generated code is up to date
        run: |
          go generate ./...
          git diff --exit-code

      - name: Run tests
        run: go test ./... -count=1 -race

#       - name: Run root tests
#         run: |
#           make connectopus
#           sudo GOPATH=$HOME/go $(which go) test ./... -test.run 'TestAsRoot*' -count=1 -race

      - name: Build release binaries
        if: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || inputs.publish }}
        run: make bin

      - name: Upload release artifacts
        if: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || inputs.publish }}
        uses: actions/upload-artifact@v3
        with:
          name: bin
          path: bin/*
          retention-days: 1

  platforms_checks:
    name: platforms_checks
    needs: linux_checks
    if: |
      always() && !cancelled() &&
      needs.linux_checks.result == 'success' &&
      (needs.code_changed.result == 'skipped' || needs.code_changed.outputs.any_modified == 'true') &&
      !(github.event_name == 'workflow_dispatch' && !inputs.check_platforms)
    strategy:
      matrix:
        os:
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go build dirs
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: npm
          cache-dependency-path: ui/package-lock.json

      - name: Run the build
        run: make

      - name: Run tests
        run: go test ./... -count=1

  update_latest:
    name: update_latest
    needs:
      - codeql_analysis
      - linux_checks
      - platforms_checks
    if: |
      always() && !cancelled() &&
      needs.codeql_analysis.result == 'success' &&
      needs.linux_checks.result == 'success' &&
      (needs.platforms_checks.result == 'success' || needs.platforms_checks.result == 'skipped') &&
      ((github.event_name == 'push' && github.ref == 'refs/heads/main') || inputs.publish)
    runs-on: ubuntu-latest
    concurrency:
      group: latest
    permissions:
      contents: write
      packages: write

    steps:

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Update latest tag
        uses: EndBug/latest-tag@v1.5.1
        with:
          ref: latest

      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          name: bin
          path: bin

      - name: Upload artifacts to latest release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: bin/*
          file_glob: true
          tag: latest
          overwrite: true
          body: "This is an automatically generated build of the latest commit that passed CI checks.  Warning: may contain bugs."
          prerelease: true

  docker_build:
    name: docker_build
    needs:
      - codeql_analysis
      - linux_checks
      - platforms_checks
    if: |
      always() && !cancelled() &&
      needs.codeql_analysis.result == 'success' &&
      needs.linux_checks.result == 'success' &&
      (needs.platforms_checks.result == 'success' || needs.platforms_checks.result == 'skipped') &&
      ((github.event_name == 'push' && github.ref == 'refs/heads/main') || inputs.publish)
    runs-on: ubuntu-latest
    concurrency:
      group: docker_build

    steps:

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          name: bin
          path: bin

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ghjm
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push container
        run: |
          docker buildx build . --platform linux/arm64,linux/amd64 --tag ghjm/connectopus:latest --push

  success_check:
    name: success_check
    needs:
      - codeql_analysis
      - linux_checks
      - platforms_checks
    if: always() && !cancelled()
    runs-on: ubuntu-latest

    steps:

      - name: Check if required checks succeeded
        if: |
          (needs.codeql_analysis.result != 'success' && needs.codeql_analysis.result != 'skipped') ||
          (needs.linux_checks.result != 'success' && needs.linux_checks.result != 'skipped') ||
          (needs.platforms_checks.result != 'success' && needs.platforms_checks.result != 'skipped')
        run: |
          echo Required tests failed
          exit 1

