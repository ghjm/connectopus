// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package cpctl

import (
	"context"
	"net/http"

	"github.com/Yamashou/gqlgenc/clientv2"
)

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli *http.Client, baseURL string, interceptors ...clientv2.RequestInterceptor) *Client {
	return &Client{Client: clientv2.NewClient(cli, baseURL, interceptors...)}
}

type Query struct {
	Netns []*NetnsResult "json:\"netns\" graphql:\"netns\""
}
type Mutation struct {
	Dummy DummyResult "json:\"dummy\" graphql:\"dummy\""
}
type GetNetnsList_Netns struct {
	Name string "json:\"name\" graphql:\"name\""
}
type GetNetns_Netns struct {
	Name string "json:\"name\" graphql:\"name\""
	Pid  int    "json:\"pid\" graphql:\"pid\""
}
type GetNetnsList struct {
	Netns []*GetNetnsList_Netns "json:\"netns\" graphql:\"netns\""
}
type GetNetns struct {
	Netns []*GetNetns_Netns "json:\"netns\" graphql:\"netns\""
}

const GetNetnsListDocument = `query GetNetnsList {
	netns {
		name
	}
}
`

func (c *Client) GetNetnsList(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetNetnsList, error) {
	vars := map[string]interface{}{}

	var res GetNetnsList
	if err := c.Client.Post(ctx, "GetNetnsList", GetNetnsListDocument, &res, vars, interceptors...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetNetnsDocument = `query GetNetns ($name: String) {
	netns(filter: {name:$name}) {
		name
		pid
	}
}
`

func (c *Client) GetNetns(ctx context.Context, name *string, interceptors ...clientv2.RequestInterceptor) (*GetNetns, error) {
	vars := map[string]interface{}{
		"name": name,
	}

	var res GetNetns
	if err := c.Client.Post(ctx, "GetNetns", GetNetnsDocument, &res, vars, interceptors...); err != nil {
		return nil, err
	}

	return &res, nil
}
