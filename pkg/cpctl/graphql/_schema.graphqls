type Query {
  netns(filter: NetnsFilter): [NetnsResult!]!
  status: Status!
}

type Mutation {
  # The schema generator seems to require at least one mutation
  dummy: DummyResult!
}

input NetnsFilter {
  name: String
}

type NetnsResult {
  name: String!
  pid: Int!
}

type DummyResult {
  mutationId: ID!
}

type Status {
  name: String!
  addr: String!
  NodeNames: [StatusNodeName!]!
  RouterNodes: [StatusRouterNode!]!
  Sessions: [StatusSession!]!
}

type StatusNodeName {
  addr: String!
  name: String!
}

type StatusRouterNode {
  node: String!
  peers: [StatusRouterNodePeer!]!
}

type StatusRouterNodePeer {
  node: String!
  cost: Float!
}

type StatusSession{
  addr: String!
  connected: Boolean!
  conn_start: String!
}
