type Query {
  netns(filter: NetnsFilter): [NetnsResult!]!
  status: Status!
}

type Mutation {
  # The schema generator seems to require at least one mutation
  dummy: DummyResult!
}

input NetnsFilter {
  name: String
}

type NetnsResult {
  name: String!
  pid: Int!
}

type DummyResult {
  mutationId: ID!
}

type Status {
  name: String!
  addr: String!
  global: StatusGlobal!
  nodes: [StatusNode!]!
  sessions: [StatusSession!]!
}

type StatusGlobal {
  domain: String!
  subnet: String!
  authorized_keys: [String!]!
}

type StatusNode {
  name: String!
  addr: String!
  conns: [StatusNodeConn!]!
}

type StatusNodeConn {
  subnet: String!
  cost: Float!
}

type StatusSession{
  addr: String!
  connected: Boolean!
  conn_start: String!
}
